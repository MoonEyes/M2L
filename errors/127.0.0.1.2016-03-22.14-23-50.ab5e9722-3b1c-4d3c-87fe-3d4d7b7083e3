(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'startswith'"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\M2L\\controllers/ctrl_salle.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n#------------------------------------------------------------------------------------#\n# afficherLesSalles\n#------------------------------------------------------------------------------------#\ndef afficherLesSalles():\n    """\n    Fournit \xc3\xa0 la vue HTML la liste de toutes les salles avec l\'ensemble des informations\n    """\n    rowsSalles =db(db.salle.categorie_id==db.categorie.id).select(db.salle.capacite,db.categorie.nom,db.salle.id,db.salle.nom,db.categorie.heureOuverture,db.categorie.heureOuvertureMinutes) #requ\xc3\xaate permettant de r\xc3\xa9cup\xc3\xa9rer les informations des salles\n    trieSalles =db(db.salle.categorie_id==db.categorie.id).select(db.salle.capacite,db.categorie.nom,db.salle.id,db.salle.nom,db.categorie.heureOuverture,db.categorie.heureOuvertureMinutes, orderby=db.categorie.nom|~db.salle.capacite )#requ\xc3\xaate permettant de r\xc3\xa9cup\xc3\xa9rer les informations des salles et les trier par capacit\xc3\xa9 et cat\xc3\xa9gorie\n    \n    return locals()\n\n#------------------------------------------------------------------------------------#\n# afficherSallesCategorie\n#------------------------------------------------------------------------------------#\ndef afficherSallesCategorie():\n    """\n    Fournit \xc3\xa0 la vue la liste des salles dont la categorie a \xc3\xa9t\xc3\xa9 transmise par l\'URL dans la variable Select_categ\n    """\n    #recup\xc3\xa9ration des varaibles transmises par la requ\xc3\xaate HTTP\n    uneCategorie=request.vars.Select_categ\n\n    # requ\xc3\xaate permettant de r\xc3\xa9cup\xc3\xa9rer le nom de la cat\xc3\xa9gorie pr\xc3\xa9c\xc3\xa9demment s\xc3\xa9lectionn\xc3\xa9e\n    rowCateg=db(db.categorie.id==uneCategorie).select(db.categorie.nom,orderby=db.categorie.nom)\n    \n    nomCateg=rowCateg[0].nom\n    \n    # requ\xc3\xaate permettant de s\xc3\xa9lectionner les salles de la cat\xc3\xa9gorie pr\xc3\xa9c\xc3\xa9demment s\xc3\xa9lectionn\xc3\xa9e\n    rowsSalles =db((db.salle.categorie_id==uneCategorie,db.salle.categorie_id==db.categorie.id)).select(db.salle.ALL,db.categorie.heureOuverture,db.categorie.heureOuvertureMinutes,db.categorie.heureFermeture,db.categorie.heureFermetureMinutes,db.categorie.nom)\n\n    return locals()\n\n#------------------------------------------------------------------------------------#\n# ajouterSalle\n#------------------------------------------------------------------------------------#\n@auth.requires_login()\ndef ajouterSalle():\n    """\n    Fournit \xc3\xa0 la vue un formulaire d\'ajout de salle\n    """\n    form=SQLFORM(db.salle)    #formulaire reposant sur la structure de la table Salle\n\n    if form.process().accepted:\n        # LE CODE PRESENT DANS CETTE SECTION SERA EXECUT\xc3\x89 SEULEMENT APR\xc3\x88S VALIDATION DU FORMULAIRE\n        # on peut acc\xc3\xa9der aux valeurs renseign\xc3\xa9es dans les champs du formulaire grace \xc3\xa0 la variable : form.vars[nomChamp]\n\n        response.flash=\'Nouvelle salle ins\xc3\xa9r\xc3\xa9e\'        # la salle est automatiquement ajout\xc3\xa9e.\n\n\n        redirect(URL(\'crtl_salle\',\'afficherSallesCategorie\',vars=dict(Select_categ=form.vars.categorie_id)))\n\n    elif form.errors:\n        response.flash=\'Erreurs de saisie\'\n  \n    return locals()\n\n#------------------------------------------------------------------------------------#\n# demanderReservationSalle\n#------------------------------------------------------------------------------------#\ndef demanderReservationSalle():\n    """\n    Fournit \xc3\xa0 la vue un formulaire de demande de r\xc3\xa9servation\n    """\n\n    #cr\xc3\xa9ation du formulaire de reservation\n    form = SQLFORM.factory(\n        Field(\'DateDebut\',\'datetime\',requires=[IS_NOT_EMPTY(),IS_DATETIME(format=T(\'%d-%m-%Y %H:%M\'),\n                       error_message=\'doit \xc3\xaatre au format DD-MM-YYYY HH:MM!\')]),\n        Field(\'DateFin\',\'datetime\', requires=[IS_NOT_EMPTY(),IS_DATETIME(format=T(\'%d-%m-%Y %H:%M\'),\n                       error_message=\'doit \xc3\xaatre au format DD-MM-YYYY HH:MM!\')]),\n        Field(\'Categorie\',db.categorie,requires=IS_IN_DB(db,db.categorie.id,\'%(nom)s\'))\n        ,labels = {\'DateDebut\':\'Date de d\xc3\xa9but \',\'DateFin\':\'Date de fin \',\'NbParticipants\':\'Nombre de participants \'})\n\n\n    if form.validate():\n        # Code ex\xc3\xa9cut\xc3\xa9 \xc3\xa0 la validation du formulaire\n        # redirection vers la page de s\xc3\xa9lection d\'une salle disponible avec transmission des donn\xc3\xa9es du formulaire\n        redirect(URL(\'ctrl_salle\',\'rechercherSalleDisponible\',vars=form.vars))\n\n    elif form.errors:\n        response.flash = \'Le formulaire contient des erreurs\'\n\n    return locals()\n\n#------------------------------------------------------------------------------------#\n# index\n#------------------------------------------------------------------------------------#\ndef index():\n    """\n    Fournit \xc3\xa0 la vue la liste des cat\xc3\xa9gories\n    """\n    rowsCateg =db().select(db.categorie.id,db.categorie.nom)    #requ\xc3\xaate permettant de r\xc3\xa9cup\xc3\xa9rer les id et nom des cat\xc3\xa9gories\n\n    return locals()\n\n#------------------------------------------------------------------------------------#\n# modifierSalle\n#------------------------------------------------------------------------------------#\n@auth.requires_login()\ndef modifierSalle():\n    """\n    Fournit \xc3\xa0 la vue HTML un formulaire de modification d\'une salle dont l\'id est transmis par URL\n    """\n    idSalle = request.vars[\'salle\']    # r\xc3\xa9cup\xc3\xa9ration des variables du formulaire transmises par la r\xc3\xaaquete HTTP\n\n    record = db.salle(idSalle) or redirect(URL(\'ctrl_salle\',\'index\'))\n    form = SQLFORM(db.salle,record,deletable = False)\n\n    if form.process().accepted:\n        # LE CODE PRESENT DANS CETTE SECTION SERA EXECUT\xc3\x89 SEULEMENT APR\xc3\x88S VALIDATION DU FORMULAIRE\n        # on peut acc\xc3\xa9der aux valeurs renseign\xc3\xa9es dans les champs du formulaire grace \xc3\xa0 la variable : form.vars[nomChamp]\n        response.flash = \'Modification enregistr\xc3\xa9e\'\n        redirect(URL(\'ctrl_salle\',\'afficherLesSalles\'))\n\n    elif form.errors:\n        response.flash = \'Le formulaire contient des erreurs\'\n\n    return locals()\n\n\n#------------------------------------------------------------------------------------#\n# rechercherSalleDisponible\n#------------------------------------------------------------------------------------#\ndef rechercherSalleDisponible():\n    """\n    Fournit \xc3\xa0 la vue la liste des salles disponibles \xc3\xa0 partir des donn\xc3\xa9es du formulaire de demande de r\xc3\xa9servation\n    """\n    # r\xc3\xa9cup\xc3\xa9ration des variables du formulaire transmises par la r\xc3\xaaquete HTTP\n    dateDebDdeR = request.vars[\'DateDebut\']\n    dateFinDdeR = request.vars[\'DateFin\']\n    categSalleRecherchee = request.vars[\'Categorie\']\n\n\n    #les salles disponibles sont :\n    # celles qui appartiennent \xc3\xa0 la cat\xc3\xa9gorie recherch\xc3\xa9e\n    # qui ont des heures d\'ouverture et de fermeture adapt\xc3\xa9s  \n    # et qui sont libres pour la p\xc3\xa9riode de r\xc3\xa9servation demand\xc3\xa9e\n\n    # r\xc3\xa9alisation d\'une sous-requ\xc3\xaate : les salles qui sont libres pour la p\xc3\xa9riode de r\xc3\xa9servation demand\xc3\xa9e\n    rowsSallesDispo1 = db((((db.reservation.dateDebut<dateDebDdeR) & (db.reservation.dateFin>dateDebDdeR))|((db.reservation.dateDebut<dateFinDdeR)&(db.reservation.dateFin>dateFinDdeR))))._select(db.reservation.salle_id)\n\n    #rowsSallesDispo =db(~db.salle.id.belongs(rowsSallesDispo1)).select(db.salle.id,db.salle.nom,db.salle.capacite,distinct=True)\n    rowsSallesDispo=db((~db.salle.id.belongs(rowsSallesDispo1))).select(db.salle.id,db.salle.nom,db.salle.capacite,distinct=True)\n\n   \n    return locals()\n\n#------------------------------------------------------------------------------------#\n# reserver\n#------------------------------------------------------------------------------------#\ndef reserver():\n    """\n    Permet d\'enregistrer la r\xc3\xa9servation.\n    """\n    # r\xc3\xa9cup\xc3\xa9ration des variables du formulaire transmises par la r\xc3\xaaquete HTTP\n    dateDebR = request.vars[\'dateDR\']\n    dateFinR = request.vars[\'dateFR\']\n    idSalleR = request.vars[\'salle\']\n\n    #insertion des donn\xc3\xa9es\n    db.reservation.insert(dateDebut=dateDebR,dateFin=dateFinR,salle_id=idSalleR)\n    # message de retour \xc3\xa0 afficher\n    message = \'Votre r\xc3\xa9servation est enregistr\xc3\xa9e.\'\n\n    return locals()\n\n#------------------------------------------------------------------------------------#\n# visualiserReservation\n#------------------------------------------------------------------------------------#\n@auth.requires_login()\ndef visualiserReservation():\n    """\n    Fournit \xc3\xa0 la vue la liste des r\xc3\xa9servations correspondant \xc3\xa0 la date s\xc3\xa9lectionn\xc3\xa9e.\n    """\n    from datetime import datetime\n    dateRecherchee = datetime.strptime(request.vars[\'date\'],"%d-%m-%Y") # transformation en datetime de la chaine de caract\xc3\xa8re transmise via URL\n\n    # requ\xc3\xaate de s\xc3\xa9lection des r\xc3\xa9servations correspondant \xc3\xa0 la date choisie\n    rowsResa=db((((db.reservation.dateDebut.year() == dateRecherchee.year) & (db.reservation.dateDebut.day() == dateRecherchee.day) & (db.reservation.dateDebut.month() == dateRecherchee.month))|((db.reservation.dateFin.year() == dateRecherchee.year) & (db.reservation.dateFin.day() == dateRecherchee.day) & (db.reservation.dateFin.month() == dateRecherchee.month)))).select(db.reservation.ALL)\n    \n    return locals()\n\nresponse._vars=response._caller(afficherSallesCategorie)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\web2py\\applications\\M2L\\controllers/ctrl_salle.py", line 184, in <module>\n  File "C:\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\web2py\\applications\\M2L\\controllers/ctrl_salle.py", line 30, in afficherSallesCategorie\n    rowsSalles =db((db.salle.categorie_id==uneCategorie,db.salle.categorie_id==db.categorie.id)).select(db.salle.ALL,db.categorie.heureOuverture,db.categorie.heureOuvertureMinutes,db.categorie.heureFermeture,db.categorie.heureFermetureMinutes,db.categorie.nom)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 965, in expand\n    for item in expression)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 965, in <genexpr>\n    for item in expression)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1391, in represent\n    field_is_type = fieldtype.startswith\nAttributeError: \'NoneType\' object has no attribute \'startswith\'\n'
p11
s.